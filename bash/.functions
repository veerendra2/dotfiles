#!/usr/bin/env bash

# Simple calculator
calc() {
	local result=""
	result="$(printf "scale=10;%s\\n" "$*" | bc --mathlib | tr -d '\\\n')"
	#						└─ default (when `--mathlib` is used) is 20

	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		# add "0" for cases like ".5"
		# add "0" for cases like "-.5"
		# remove trailing zeros
		printf "%s" "$result" |
			sed -e 's/^\./0./'  \
			-e 's/^-\./-0./' \
			-e 's/0*$//;s/\.$//'
	else
		printf "%s" "$result"
	fi
	printf "\\n"
}

# Make a temporary directory and enter it
tmpd() {
	local dir
	if [ $# -eq 0 ]; then
		dir=$(mktemp -d)
	else
		dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
	fi
	cd "$dir" || exit
}

# Determine size of a file or total size of a directory
fs() {
	# shellcheck disable=SC2199
	if [[ -n "$@" ]]; then
		du -sh -- "$@"
	else
		du -sh -- .[^.]* *
	fi
}

pbcopy() {
	stdin=$(</dev/stdin);
	pbcopy="$(which pbcopy)";
	if [[ -n "$pbcopy" ]]; then
		echo "$stdin" | "$pbcopy"
	else
		echo "$stdin" | xclip -selection clipboard
	fi
}
pbpaste() {
	pbpaste="$(which pbpaste)";
	if [[ -n "$pbpaste" ]]; then
		"$pbpaste"
	else
		xclip -selection clipboard
	fi
}

# `o` with no arguments opens the current directory, otherwise
# opens the given location
o() {
	if [ $# -eq 0 ]; then
		xdg-open .	> /dev/null 2>&1
	else
		xdg-open "$@" > /dev/null 2>&1
	fi
}

# Get colors in manual pages
man() {
	env \
		LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
		LESS_TERMCAP_md="$(printf '\e[1;31m')" \
		LESS_TERMCAP_me="$(printf '\e[0m')" \
		LESS_TERMCAP_se="$(printf '\e[0m')" \
		LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
		LESS_TERMCAP_ue="$(printf '\e[0m')" \
		LESS_TERMCAP_us="$(printf '\e[1;32m')" \
		man "$@"
}

# Use feh to nicely view images
openimage() {
	local types='*.jpg *.JPG *.png *.PNG *.gif *.GIF *.jpeg *.JPEG'

	cd "$(dirname "$1")" || exit
	local file
	file=$(basename "$1")

	feh -q "$types" --auto-zoom \
		--sort filename --borderless \
		--scale-down --draw-filename \
		--image-bg black \
		--start-at "$file"
}

isup() {
	local uri=$1

	if curl -s --head  --request GET "$uri" | grep "200 OK" > /dev/null ; then
		echo "Yep!"
	else
		echo "Nope!"
	fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
	tree -aupCsh -I '.git' --dirsfirst "$@" | less -FRNX
}

# SSL Validity
ssl_validity() {
    echo | openssl s_client -servername $1 -connect $1:443 2>/dev/null | openssl x509 -noout -dates
}

# Curl with times. https://stackoverflow.com/questions/18215389
curltime(){
	curl -w @- -o /dev/null -s "$1" <<'EOF'
    time_namelookup:  %{time_namelookup}\n
       time_connect:  %{time_connect}\n
    time_appconnect:  %{time_appconnect}\n
   time_pretransfer:  %{time_pretransfer}\n
      time_redirect:  %{time_redirect}\n
 time_starttransfer:  %{time_starttransfer}\n
                    ----------\n
         time_total:  %{time_total}\n
EOF
}

# Remove files from git history
rm_file_git_history(){
	git filter-branch -f --index-filter 'git rm -rf --cached --ignore-unmatch $1' HEAD
}

# Removes stopped containers
docker_rm_stopped(){
	running=`docker ps -q`
	stopped=`docker ps -aq | grep -v $running`
	docker rm -f $stopped
}

# Stop all containers
docker_stop_all(){
	docker stop `docker ps -q`
}

# Removes all docker Images ** DANGER **
docker_rm_imgs(){
	echo "Are you sure want to delete all Docker images?"
	read a
	if [ "$a" == "yes" ];
	then
		docker rmi -f `docker images -q --no-trunc` > /dev/null
	fi
}

# Removes stopped container images
docker_rm_stopped_imgs(){
	mapfile -t images < <(docker images -q --no-trunc)
	for c in $(docker ps -aq); do
		image=$(docker inspect --format '{{.Image}}' "$c")
		images=( "${images[@]/$image}" )
	done
	docker rmi -f "${images[@]}" 2>&1 || true
}
